# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : handler.sm

import statemap


class HandlerState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def receiveFile(self, fsm):
        self.Default(fsm)

    def status(self, fsm):
        self.Default(fsm)

    def variables(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write('TRANSITION   : Default\n')
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException, msg

class MainMap_Default(HandlerState):
    pass

class MainMap_Accepting(MainMap_Default):

    def receiveFile(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Accepting\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Accepting.receiveFile()\n")

        fsm.clearState()
        try:
            ctxt.processFile()
            ctxt.sendStatus()
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Accepting.receiveFile()\n")

            fsm.setState(MainMap.Processing)
            fsm.getState().Entry(fsm)

    def status(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Accepting\n")

        endState = fsm.getState()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Accepting.status()\n")

        fsm.clearState()
        try:
            ctxt.sendStatus()
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Accepting.status()\n")

            fsm.setState(endState)

    def variables(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Accepting\n")

        endState = fsm.getState()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Accepting.variables()\n")

        fsm.clearState()
        try:
            ctxt.sendStatus()
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Accepting.variables()\n")

            fsm.setState(endState)

class MainMap_Processing(MainMap_Default):

    def receiveFile(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Processing\n")

        endState = fsm.getState()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Processing.receiveFile()\n")

        fsm.clearState()
        try:
            ctxt.sendStatus()
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Processing.receiveFile()\n")

            fsm.setState(endState)

    def status(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Processing\n")

        endState = fsm.getState()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Processing.status()\n")

        fsm.clearState()
        try:
            ctxt.sendStatus()
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Processing.status()\n")

            fsm.setState(endState)

    def variables(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Processing\n")

        endState = fsm.getState()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Processing.variables()\n")

        fsm.clearState()
        try:
            ctxt.sendStatus()
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Processing.variables()\n")

            fsm.setState(endState)

class MainMap_Waiting(MainMap_Default):

    def receiveFile(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Waiting\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Waiting.receiveFile()\n")

        fsm.clearState()
        try:
            ctxt.processFile()
            ctxt.sendStatus()
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Waiting.receiveFile()\n")

            fsm.setState(MainMap.Processing)
            fsm.getState().Entry(fsm)

    def status(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Waiting\n")

        endState = fsm.getState()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Waiting.status()\n")

        fsm.clearState()
        try:
            ctxt.sendStatus()
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Waiting.status()\n")

            fsm.setState(endState)

    def variables(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Waiting\n")

        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Waiting.variables()\n")

        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Waiting.variables()\n")


class MainMap(object):

    Accepting = MainMap_Accepting('MainMap.Accepting', 0)
    Processing = MainMap_Processing('MainMap.Processing', 1)
    Waiting = MainMap_Waiting('MainMap.Waiting', 2)
    Default = MainMap_Default('MainMap.Default', -1)

class Handler_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, MainMap.Accepting)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
