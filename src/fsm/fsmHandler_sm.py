# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : fsmHandler.sm

import statemap


class FiniteStateMachineHandlerState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def failure(self, fsm):
        self.Default(fsm)

    def query(self, fsm, content):
        self.Default(fsm)

    def receiveFile(self, fsm, request):
        self.Default(fsm)

    def reset(self, fsm):
        self.Default(fsm)

    def result(self, fsm, content):
        self.Default(fsm)

    def success(self, fsm):
        self.Default(fsm)

    def timeout(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write('TRANSITION   : Default\n')
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException, msg

class MainMap_Default(FiniteStateMachineHandlerState):
    pass

class MainMap_Idle(MainMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.setStatus('Idle')

    def receiveFile(self, fsm, request):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Idle\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Idle.receiveFile(request)\n")

        fsm.clearState()
        try:
            ctxt.processFile(request)
            ctxt.setStatus('Processing input file')
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Idle.receiveFile(request)\n")

            fsm.setState(MainMap.ProcessingFile)
            fsm.getState().Entry(fsm)

class MainMap_ProcessingFile(MainMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.checkFileProcessing()

    def failure(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.ProcessingFile\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.ProcessingFile.failure()\n")

        fsm.clearState()
        try:
            ctxt.setErrorStatus('ERROR: File NOT processed.')
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.ProcessingFile.failure()\n")

            fsm.setState(MainMap.Idle)
            fsm.getState().Entry(fsm)

    def success(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.ProcessingFile\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.ProcessingFile.success()\n")

        fsm.clearState()
        try:
            ctxt.setSuccessStatus('File successfully processed.')
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.ProcessingFile.success()\n")

            fsm.setState(MainMap.Waiting)
            fsm.getState().Entry(fsm)

class MainMap_Waiting(MainMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.setStatus('Waiting for queries')

    def query(self, fsm, content):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Waiting\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Waiting.query(content)\n")

        fsm.clearState()
        try:
            ctxt.handleQuery(content)
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Waiting.query(content)\n")

            fsm.setState(MainMap.ProcessingQuery)
            fsm.getState().Entry(fsm)

    def reset(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Waiting\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Waiting.reset()\n")

        fsm.clearState()
        try:
            ctxt.cleanUp()
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Waiting.reset()\n")

            fsm.setState(MainMap.Idle)
            fsm.getState().Entry(fsm)

    def result(self, fsm, content):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.Waiting\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.Waiting.result(content)\n")

        fsm.clearState()
        try:
            ctxt.handleResult(content)
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.Waiting.result(content)\n")

            fsm.setState(MainMap.Waiting)
            fsm.getState().Entry(fsm)

class MainMap_ProcessingQuery(MainMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.setStatus('Processing query')

    def failure(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.ProcessingQuery\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.ProcessingQuery.failure()\n")

        fsm.clearState()
        try:
            ctxt.setErrorStatus('ERROR: Query NOT satisfied')
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.ProcessingQuery.failure()\n")

            fsm.setState(MainMap.Waiting)
            fsm.getState().Entry(fsm)

    def success(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.ProcessingQuery\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.ProcessingQuery.success()\n")

        fsm.clearState()
        try:
            ctxt.setSuccessStatus('Query satisfied')
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.ProcessingQuery.success()\n")

            fsm.setState(MainMap.Waiting)
            fsm.getState().Entry(fsm)

    def timeout(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : MainMap.ProcessingQuery\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: MainMap.ProcessingQuery.timeout()\n")

        fsm.clearState()
        try:
            ctxt.setErrorStatus('ERROR: Timeout!')
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : MainMap.ProcessingQuery.timeout()\n")

            fsm.setState(MainMap.Waiting)
            fsm.getState().Entry(fsm)

class MainMap(object):

    Idle = MainMap_Idle('MainMap.Idle', 0)
    ProcessingFile = MainMap_ProcessingFile('MainMap.ProcessingFile', 1)
    Waiting = MainMap_Waiting('MainMap.Waiting', 2)
    ProcessingQuery = MainMap_ProcessingQuery('MainMap.ProcessingQuery', 3)
    Default = MainMap_Default('MainMap.Default', -1)

class FiniteStateMachineHandler_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, MainMap.Idle)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
